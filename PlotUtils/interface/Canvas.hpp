/**
 * @file    Canvas.hpp
 * @brief   An extension of the TCanvas and TPad classes for a better batch
 *          plotting experience.
 * @author  Yi-Mu "Enoch" Chen (ensc@hep1.phys.ntu.edu.tw)
 * @details
 *    Notice that the classes here would be of 'protected' inheritance of
 *    ROOT objects. So not every operation would be possible. The reason
 *    for this is that the ROOT Canvas/Pads have wayyyy to many functions
 *    designed for interactive plotting. Here we are actively stripping down
 *    the functionality for batch plotting, while keeping it a ROOT class
 *    so that the user can save the objects if needed, and play around
 *    with the settings in a pure root environment.
 */
#ifndef USERUTILS_PLOTUTILS_CANVAS_HPP
#define USERUTILS_PLOTUTILS_CANVAS_HPP

#include "UserUtils/Common/interface/STLUtils/Filesystem.hpp"
#include "UserUtils/PlotUtils/interface/Constants.hpp"

#include "TCanvas.h"
#include "TLatex.h"
#include "TPad.h"

#include <string>
#include <fstream>

namespace usr  {

namespace plt {

// forward declaration of the classes
class Canvas;
class PadBase;

/**
 * A constructor helper class for Pad objects. The doubles in the class
 * correspond the the relative position of the pad corners on the Canvas object.
 */
struct PadSize
{
  double xmin;
  double ymin;
  double xmax;
  double ymax;
  PadSize(
    const double x_min = 0,
    const double y_min = 0,
    const double x_max = 1,
    const double y_max = 1 ) :
    xmin( x_min ),
    ymin( y_min ),
    xmax( x_max ),
    ymax( y_max ){}
};


/**
 * A constructor helper class of storing a font format in a canvas, so that
 * all text objects will have the same font settings.
 * @param _size       The size of the font should is gives as pts.
 * @param _face       Font faces should refer to the defined types in
 * @param _lineheight The line height given in 'ems'
 */
struct FontSet
{
  static float   default_size;
  static font::face default_face;
  static float      default_lineheight;
  FontSet(
    const float      _size       = default_size,
    const font::face _face       = default_face,
    const float      _lineheight = default_lineheight ) :
    size( _size ),
    face( _face ),
    lineheight( _lineheight ){}
  float      size;
  font::face face;
  float      lineheight;
};

extern FontSet FullPageFont;
extern FontSet HalfPageFont;

/*-----------------------------------------------------------------------------
 *  The Canvas class is designed as an extension to the TCanvas object to
 *  increase the functionality on two fronts:
 *  - Better saving functions:
 *    The PDF files generated by the ROOT routines buggy with some latex engines
 *    (xelatex), and due to a fixed PDI ratio in all root objects, the raster
 *    images generated by ROOT are notoriously bad. The new SaveAs<Format>
 *    functions call on common Linux image processing tools that are available
 *    in all editions of Scientific Linux to fix PDF issues, as well as using
 *    the PDF to properly produce high quality raster images to be used in
 *    presentation.
 *  - Ensuring a proper Pad-Canvas Onwership:
 *    While the TPad spawning in ROOT allows for arbitrary complex layouts, it
 *    is difficult to keep track on which Pad is contained in which parent,
 *    and difficult to keep track of layout, and which pad an object will be
 *    plotted on when the Draw function is called.
 *    The new interface ensure a two level Heirachy: The Canvas which is used
 *    for plot size determination, and the Pad which lists the objects
 *    that will be plotted. While the Draw function is still viable, the user
 *    is incouraged to use the Pad::Plot<Obj> functions for a more
 *    comprehensive expression of where objects are being plotted.
   --------------------------------------------------------------------------*/
class Canvas : protected TCanvas
{
public:
  Canvas (
    const length_t width,
    const length_t height,
    const FontSet& = FontSet()// Default settings
    );
  virtual
  ~Canvas ();

  // Template interface for spawning new SubPads.
  // The new Pad coordinates must be specified now.
  // Additional arguments for the inherited objects are allow.
  // All New pads must have constructors arguments: PadSize.
  template<typename PadType, typename ... Args>
  PadType& Add( const PadSize&, Args ... );

  template<typename PadType>
  PadType& GetPad( const unsigned );// Accessing pad by index

  // Better saving functions. Uses the stock save-to-PDF, fixes the figure
  // rotation issue due missing PDF settings using ghostscript, then uses
  // various conversion tools for better image qualities.
  void SaveAsPDF( const fs::path& );
  void SaveAsPNG( const fs::path&, const unsigned dpi = 300 );

  // Saving as raw MACRO
  void SaveAsCPP( const fs::path& );

  // Saving the canvas object into a ROOT file with a custom name
  void SaveToROOT( const fs::path&, const std::string& name );

  // Text dimension access. Notice that the Canvas Class itself doesn't
  // include the text writing function.
  float FontSize() const;
  short FontFace() const;
  float LineHeight() const;

  // Canvas Dimension access
  inline unsigned
  Width() const { return TCanvas::GetWw(); }
  inline unsigned
  Height() const { return TCanvas::GetWh(); }

protected:
  // Pads would be owned by Canvas.
  const FontSet _fontset;
  std::vector<PadBase*> _padlist;
  // cannot use smart pointers... Doesn't play nice with the overloaded
  // TObject new functions with non-public inheritance.

  // Function to be called before saving functions are executed.
  void Finalize( const fs::path& );

  // Saving function helper functions, common functions that should be
  // called before saving the files, including properly setting
  // the axis and saving to a temporary PDF file.
  fs::path SaveTempPDF( const fs::path& );
};


/*-----------------------------------------------------------------------------
 *  The new abstract Pad class.
 *  These classes is essentially an Class layer to hide the original TPad
 *  implementations, only exposing the functions that is nessesary to
 *  modify the layouts for standard figures.
 *  There are also new contents to the class:
 *   - A TLatex set to the standard font settings.
 *   - A TLegend with the standard font settings.
 *  Actual implementations of how objects should be plotted with be handled
 *  by the inhereted implementations of the classes.
 *
 *  The Constructor of the classes are intensionally removed from user access,
 *  and instead need to be created by the Canvas class. If you are content
 *  with using ROOT style plot arguments, the PlotObj function
 *  functions entirely the same as the Draw function.
   --------------------------------------------------------------------------*/
class PadBase : protected TPad
{
public:
  virtual
  ~PadBase ();
  friend class Canvas;

  PadBase()                 = delete;
  PadBase( const PadBase& ) = delete;

public:
  // Functions that most likely would not need additional enhancements in
  // inheritied classes.

  // Dimension access.
  double RelWidth() const;
  double RelHeight() const;
  double AbsWidth() const;
  double AbsHeight() const;

  // Margin setting is still user adjustable
  inline void
  SetTopMargin( const float x ){ TPad::SetTopMargin( x );}
  inline void
  SetLeftMargin( const float x ){ TPad::SetLeftMargin( x );}
  inline void
  SetRightMargin( const float x ){ TPad::SetRightMargin( x );}
  inline void
  SetBottomMargin( const float x ){ TPad::SetBottomMargin( x ); }

  inline float
  GetTopMargin() const { return TPad::GetTopMargin();}
  inline float
  GetLeftMargin() const { return TPad::GetLeftMargin();}
  inline float
  GetRightMargin() const { return TPad::GetRightMargin();}
  inline float
  GetBottomMargin() const { return TPad::GetBottomMargin();}

  // Latex Writing functions
  inline float
  FontSize() const { return ParentCanvas().FontSize(); }
  inline short
  FontFace() const { return ParentCanvas().FontFace(); }
  inline float
  LineHeight() const { return ParentCanvas().LineHeight(); }
  inline float
  RelTextHeight() const { return FontSize()/AbsHeight(); }
  inline float
  RelLineHeight() const { return LineHeight()/AbsHeight(); }

  PadBase& SetTextCursor( const double, const double );
  PadBase& SetTextCursor( const double, const double, const font::align );
  PadBase& WriteLine( const std::string& );
  PadBase& WriteAtData( const double, const double, const std::string& );

  // TObject Draw call. Ensuring the object is being drawn on this pad
  // specificly
  void PlotObj( TObject&, Option_t* = "" );
  inline void
  PlotObj( TObject* obj, Option_t* opt = "" ){ PlotObj( *obj, opt ); }

protected:
  // Commonly used functions to be further augmented by inherited
  // classes
  PadBase( const PadSize& );

  // Getting the parent Canvas
  Canvas& ParentCanvas() const;

  inline TList*
  GetListOfPrimitives() const { return TPad::GetListOfPrimitives(); }

  // Draw objects immediately after Pad is drawn.
  virtual void InitDraw() {};
  // Additional finalization before save function.
  virtual void Finalize() {};

protected:// Data members and member initialization
  TLatex _latex;
  float _latex_cursorx;
  float _latex_cursory;
  void _init_latex();
};

}/* plt */

}/* usr  */


#include "UserUtils/PlotUtils/src/Canvas.ipp"

#endif/* end of include guard: USERUTILS_PLOTUTILS_CANVAS_HPP  */
